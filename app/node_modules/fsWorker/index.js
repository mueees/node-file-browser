var _ = require('underscore'),
    fs = require('fs'),
    path = require('path');

var root = "./public";

function FsWorker(){}
_.extend(FsWorker.prototype, {

    //public

    //получить все файлы и папки в текущей папке
    listDir: function(dirName, cb){
        var dir = root + dirName;

        fs.readdir(dir, function(err, list){
            if (err) return cb(err);
            cb(null, list);
        });
    },

    //получить все файлы и папки с описанием каждого файла
    listDirWithInfo: function(dirName, cb){

        var _this = this;
        var dir = root + dirName;
        this.listDir(dirName, function(err, list){
            _this._listDirWithInfo( err, list, dir, cb )
        });
    },

    //Создать папку рекурсивно
    makeDir: function(dirPath, mode, callback, position){

        var mode = mode || 0777,
            position = position || 0,
            parts = dirPath.split('/'),
            _this = this;

        parts = parts.filter(function(val) {
            if( val ) return val;
        })

        if (position >= parts.length) {
            if (callback) {
                return callback();
            } else {
                return true;
            }
        }

        var directory = root + "/" + parts.slice(0, position + 1).join('/');

        fs.stat(directory, function(err) {
            if (err === null) {
                _this.makeDir(dirPath, mode, callback, position + 1);
            } else {
                fs.mkdir(directory, mode, function (err) {
                    if (err) {
                        if (callback) {
                            return callback(err);
                        } else {
                            throw err;
                        }
                    } else {
                        _this.makeDir(dirPath, mode, callback, position + 1);
                    }
                })
            }
        })
    },

    //Удалить папку рекурсивно
    removeDir: function(pathItem){
        var _this = this;
        var fullPath = root + pathItem;

        if( fs.existsSync(fullPath) ) {

            if(!fs.statSync(fullPath).isDirectory()){
                fs.unlinkSync(fullPath);
            }else {
                fs.readdirSync(fullPath).forEach(function(file, index){

                    var curPath = fullPath + "/" + file;

                    if(fs.statSync(curPath).isDirectory()) {
                        _this.removeDir(pathItem + "/" + file);
                    } else {
                        fs.unlinkSync(curPath);
                    }
                });
                fs.rmdirSync(fullPath);
            }

        }
    },

    //Удалить папки рекурсивно
    removeDirs: function(dirs){
        var _this = this;

        _.each(dirs, function(dir){
            _this.removeDir(dir);
        })
    },

    //renameFolder
    rename: function(dirPath, newName, cb){
        var parts = dirPath.split('/').filter(function(val) {if( val ) return val;});
        var oldName = parts.pop();

        var oldPath = root + "/" + parts.join('/') + "/" + oldName;
        var newPath = root + "/" + parts.join('/') + "/" + newName;
        fs.rename(oldPath, newPath, cb)
    },


    _listDirWithInfo: function(err, list, dir, cb){

        if( err ){
            console.log(err);
            cb(err);
            return false;
        }

        var pending = list.length;
        var results = [],
            _this = this;
        if (!pending) return cb(null, results);

        list.forEach(function(file){
            var filePath = dir + file;
            _this._getStat(filePath, function(err, stat){

                if( err ){
                    console.log(err);
                    return false;
                }

                stat['path'] = _this._clearRoot(filePath);
                stat['name'] = file;
                stat['isDirectory'] = stat.isDirectory();
                results.push(stat);
                if (!--pending) cb(null, results);
            });
        });

    },
    _clearRoot: function(filePath){
        return filePath.replace(root,"");
    },
    _getStat: function(path, cb){
        fs.stat(path, cb);
    },
    walk: function(dir, done){
        var results = [];
        var _this = this;

        fs.readdir(dir, function(err, list) {
            if (err) return done(err);
            var i = 0;
            fs.readdir(dir, function(err, list) {
                if (err) return done(err);
                var pending = list.length;
                if (!pending) return done(null, results);
                list.forEach(function(file) {
                    file = dir + '/' + file;
                    fs.stat(file, function(err, stat) {
                        if (stat && stat.isDirectory()) {
                            _this.walk(file, function(err, res) {
                                results = results.concat(res);
                                if (!--pending) done(null, results);
                            });
                        } else {
                            results.push(file);
                            if (!--pending) done(null, results);
                        }
                    });
                });
            });
        });
    }
})
/*var fsWoker = new FsWorker();
fsWoker.makeDir('/img/blog/default/123');*/

module.exports = FsWorker;

/*

 fsWoker.rename('/some/New Text Document.txt', "newName", function(err){
 console.log(err)
 });

 fsWoker.rename('/some/test/rename', "newName", function(err){
    console.log(err)
 });

 fsWoker.removeDir('/some');

 fsWoker.makeDir('/some/test/plugins');

 fsWoker.listDir("/", function(err, done){
 console.log(err);
 console.log(done);
 })

 fsWoker.listDirWithInfo("/", function(err, done){
 console.log(err);
 console.log(done);
 })

 */